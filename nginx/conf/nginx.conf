
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    proxy_cache_path C:/nginx/cache/hls levels=1:2 keys_zone=hls_cache:50m max_size=2g inactive=1h use_temp_path=off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost;

        set $secure_link_secret 'secretkey for signed url';

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root html;
            index qwen.html;
        }


        location /videos/ {
            # --- CORS Configuration for Video Player ---
            # Handles browser "preflight" permission checks.
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
                add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Range, Content-Type' always;
                add_header 'Access-Control-Max-Age' 1728000;
                return 204;
            }
            # Adds the permission header to the actual video file responses.
            add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
            add_header Vary Origin always;
            # --- End CORS Configuration ---

            # secure_link reads signature from query arg 'sig'
            secure_link $arg_sig,$arg_st;
            # compute expected md5 as md5("<st><uri><secret>")
            secure_link_md5 "$arg_st$uri$secure_link_secret";

            # Auth and error handling
            if ($secure_link = "") {
                return 403;
            }
            if ($secure_link = "0") {
                return 410;
            }

            # caching 
            proxy_cache hls_cache;
            proxy_buffering on;
            proxy_cache_key "$scheme$host$uri";
            proxy_cache_valid 200 30m;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 10s;
            proxy_cache_background_update on;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

            # Ip masking 
            proxy_set_header X-Real-IP "";
            proxy_set_header X-Forwarded-For "";
            proxy_set_header Host localhost;
            
            
            # Streaming optimizations;
            proxy_set_header Connection '';
            proxy_read_timeout 3600s;
            
            # Proxy to MinIO
            proxy_pass http://127.0.0.1:9000/streaming/videos/;

            add_header X-Cache-Status $upstream_cache_status;
             add_header Cache-Control "public, max-age=1800";
        }


        location /docs {
            proxy_pass http://localhost:8000/docs;
        }

        # for my fastapi application calls
        location /api/ {
            # --- CORS Configuration for JavaScript API Calls ---
            # Handles browser "preflight" permission checks.
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                # Add any custom headers your frontend might send, like 'Authorization'.
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always; 
            add_header 'Access-Control-Max-Age' 1728000;
            return 204;
            }
            # Adds the permission header to the actual API responses.
            add_header 'Access-Control-Allow-Origin' 'http://localhost' always;
            # --- End CORS Configuration ---

            proxy_set_header Host $host;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_set_header X-Accel-Buffering no;
            proxy_cache off;

            proxy_pass http://127.0.0.1:8000/api/;
        }

        location /pending/ {

            limit_except PUT {
                # Deny all other methods (GET, POST, DELETE, etc.)
                deny all;
            }

            client_max_body_size 10G; 

            # --- ADD THIS LINE TO ENABLE STREAMING ---
            proxy_request_buffering off;

            # --- The rest of your configuration is the same ---
            proxy_pass http://127.0.0.1:9000/pending/;
            
            proxy_set_header Host "localhost:9000";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
